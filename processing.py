# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yHrrwnOYEpnHiK3lYfZraZ80jhop0-Ut
"""

import requests
import json
import pandas as pd
import torch
import torch.nn as nn
from transformers import BertModel, BertTokenizer
import torch
import torch.nn.functional as F
from transformers import BertTokenizer
import os

api_key = 'XXXXXXXX'


class BertForSentimentClassification(nn.Module):
    def __init__(self, bert_model_name='bert-base-uncased', num_classes=2):
        super(BertForSentimentClassification, self).__init__()
        self.bert = BertModel.from_pretrained(bert_model_name)
        self.dropout = nn.Dropout(0.1)
        self.classifier = nn.Linear(self.bert.config.hidden_size, num_classes)

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        pooled_output = outputs.pooler_output
        x = self.dropout(pooled_output)
        logits = self.classifier(x)
        return logits




def predict_sentiment(model, tokenizer, text, device=None):
    """
    Make softmax predictions on input text using the trained BERT model.

    Args:
    - model: Trained BertForSentimentClassification model
    - text: Input text string
    - device: torch.device (if None, will use CUDA if available)

    Returns:
    - predictions: Dict containing softmax probabilities and predicted class
    """
    if device is None:
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

    model.eval()
    model.to(device)

    # Tokenize input text
    encoded_input = tokenizer(text, padding=True, truncation=True, max_length=128, return_tensors='pt')

    # Move input to device
    input_ids = encoded_input['input_ids'].to(device)
    attention_mask = encoded_input['attention_mask'].to(device)

    # Make prediction
    with torch.no_grad():
        outputs = model(input_ids, attention_mask=attention_mask)

    # Apply softmax to get probabilities
    probabilities = F.softmax(outputs, dim=1)

    # Convert to numpy for easier handling
    probabilities = probabilities.cpu().numpy()[0]

    if len(probabilities) == 2:
        # Binary classification
        return [float(probabilities[0]), float(probabilities[1]), float(probabilities[1]) - float(probabilities[0])]
    else:
        return [0., 0., 0.]

categories = [
    'Business Day',
    'World',
    'Arts',
    'Times Insider',
    'U.S.',
    'Travel',
    'Style',
    'Food',
    'Real Estate',
    'Movies',
    'Briefing',
    'Science',
    'Your Money',
    'The Learning Network',
    'Climate',
    'Health',
    'Theater',
    'Books',
    'Magazine',
    'Sports',
    'Fashion & Style',
    'T Magazine',
    'Technology',
    'Multimedia/Photos',

]

if __name__ == '__main__':
    model = torch.load('model.pt', map_location=torch.device('cpu'))

    # Load tokenizer
    tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

    if not os.path.exists('/data/processed'):
        os.makedirs('/data/processed')

    for year in range(2023, 2025):
        for month in range(1, 13):
            url = f'https://api.nytimes.com/svc/archive/v1/{year}/{month}.json?api-key={api_key}'
            # sending get request and saving the response as response object
            r = requests.get(url = url)

            # extracting data in json format
            data = r.json()

            data = pd.DataFrame(data['response']['docs'])
            data = data[data['type_of_material'] == 'News']
            data = data[data['section_name'].isin(categories)]
            data.dropna(subset=['print_section'], inplace=True)
            data.dropna(subset=['snippet'], inplace=True)
            data = data[data['keywords'] != '[]']

            rows = []
            for index, row in data.iterrows():
                row_dict = {}
                results = predict_sentiment(model,tokenizer, row['snippet'])
                row_dict['snippet'] = row['snippet']
                row_dict['negative'] = results[0]
                row_dict['positive'] = results[1]
                row_dict['sentiment_score'] = results[2]
                rows.append(row_dict)

            df = pd.DataFrame(rows)
            df = data.merge(df, left_on='snippet', right_on='snippet', how='left')
            df = df[['snippet','keywords','news_desk','headline','keywords','pub_date','negative','positive','sentiment_score']]
            df.to_csv(f'./data/processed/{year}_{month}.csv')

